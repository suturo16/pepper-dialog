# this function is executed once for every new user chatting with pepper
outputmacro: pepper()  # you get pepper by default
$cs_token = #DO_INTERJECTION_SPLITTING  | #DO_SUBSTITUTE_SYSTEM   | #DO_NUMBER_MERGE | #DO_DATE_MERGE  | #DO_PROPERNAME_MERGE  | #DO_SPELLCHECK  | #DO_PARSE 




^addtopic(~introductions)
^addtopic(~bakery_service)
^addtopic(~closings)


#initialization
$cs_control_main = ~control
#  $cs_control_post = ~XPOSTPROCESS  # uncomment to enable talk
$userprompt = ^"%user: >"
$botprompt = ^"PEPPER: "




#pepper robot data
$share_peppername = Franklin
$share_pepperorigin = Germany
$share_pepperage    = 10
$share_pepperhow = good

#user data
$share_username = null
$share_userorigin = null
$share_userage    = null
$share_pepperhow = null
$share_userlocation=null
$share_useramountcakeordered=0
$share_useramountcakeremaining=0  
$share_useramountcakedelivered=0  

#request status
$UNKNOWN_PERSON=UNKNOWNPERSON
$UNKNOWN_RETURN=UNKNOWNRETURN
$CLOSEUSER=CLOSEUSER
$INCREASECAKE=INCREASECAKE
$DECREASECAKE=DECREASECAKE
$DROPCAKE=DROPCAKE
$NBERPIECE=0
#ORDERTYPE in {NORMAL,INCREASE,DECREASE}
$ORDERTYPE=NORMAL
$MISUNDERSTANDING=MISUNDERSTANDING
$UNKNOWN_QUESTION=UNKNOWNQUESTION
$UNKNOWN_PARAMETER=UNKNOWNPARAMETER
$REQUEST_FAILED=REQUESTFAILED
$REQUEST_DONE=REQUESTDONE
$PROCESSING_REQUEST_SHORT=PROCESSINGREQUESTSHORT
$PROCESSING_REQUEST_LONG=PROCESSINGREQUESTLONG
$REQUEST_FINAL_FAILED=REQUESTFINALFAILED
$REQUEST=CUTCAKE
if($NBERODER){
}else{
$NBERODER=0
}

#identification variables
$SETUSERDATA=SETUSERDATA
$UPDATEUSERDATA=UPDATEUSERDATA
$PASS=PASS
$REGISTERED=FALSE
table: defaultbot (^name)
^createfact(^name defaultbot defaultbot)
DATA:
pepper

concept: ~location[sit seat place stay]
concept: ~increaseorder[increase add more again additional plus "want again" "want more" "need again"  higher high "need more" 
                       augmenting augment augmentation addition increasing]
concept: ~decreaseorder[decrease remove reduce less fewer few  away "take away" "drop" lower low reduction cancel cancellation removal decreasing]
concept: ~EXCEPTION [UNKNOWNQUESTION UNKNOWNPARAMETER REQUESTFAILED REQUESTFINALFAILED REQUESTDONE PROCESSINGREQUESTSHORT
                    PROCESSINGREQUESTLONG CUTCAKE INCREASECAKE DECREASECAKE UNKNOWNRETURN UNKNOWNPERSON] 
concept: ~place [origin land country continent city town quarter village school region]
concept: ~health [healthy feel sense ]
concept: ~ages [age]
concept: ~humannames[~humanname Mihai Alexander Hendrik Fereshta Hagen Andrea Tobias Constantin Lukas Rafael Michael Alina Arthur Chris Adrian Daniel Lena Georg Franklin Gayane Feroz Sascha Ferenc Kevin Asil Elias Andrei Dominic Michael Arthur Sir unknownname]
concept: ~GOOD [good powerful fit  healthy  ~good_quality_adjectives nice super extraordinary ~emohappy excellent ok sufficient enough great]
concept: ~BAD [bad powerless tired sick ~emosad weak poor insufficient small ~bad_quality_adjectives ]
concept: ~MISUNDERSTANDING["I dont get you" "I didnt get" "I dont understand" "it is not clear" "can you repeat" "could you repeat" "not understood" "it is unclear" "one more time"]
topic: ~control system ()

# on startup, do introduction
u: ( %input<%userfirstline) 
	gambit(~introductions)

u: (< shut up >) $shutup = 1
u: (< talk  >) $shutup = null

u: (\[ callback \]) Callback seen.
u: (\[ loopback \]) Loopback seen.
u: (\[ alarm \]) Alarm seen.
u: (< loopback test) \[ loopback=1000 \] Loopback requested.
u: (< callback test) \[ callback=1000 \] Callback requested.
u: (< alarm test) \[ alarm=5000 \] Alarm requested.

u: () # main per-sentence processing

	$$currenttopic = %topic		# get the current topic at start of volley

	if ( %response == 0 ) {nofail(TOPIC ^rejoinder())}	# try for rejoinders. might generate an answer directly from what we are looking for.

	if (%length == 0 AND %response == 0 )
	{
		nofail(TOPIC ^gambit($$currenttopic))  # gambit current topic since no input (usually start of conversation)
	}

	if (%response == 0) { nofail(TOPIC ^respond($$currenttopic)) } # current topic tries to respond to his input

	if (%response == 0) # see if some other topic has keywords matching his input (given we have no response yet)
	{
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC ^respond($$topic))
			if (%response != 0) # stop when we find something to say
			{
				^end(RULE)	# we are done, this terminates the loop (not the rule)
			}
		}
	}	


	# if we have rejoinders for what we said OR we asked a question, stop here
	if (%outputrejoinder OR %lastquestion) 
	{
		end(TOPIC)
	}


	if (%response == 0 AND ^marked($$currenttopic)) { nofail(TOPIC ^gambit($$currenttopic)) } # gambit current topic since keywords match current topic

	if (%response == 0) # gambit from ANY matching topic
	{
		@8 = ^keywordtopics()	# get topics referred in input
		loop()
		{
			$$topic = first(@8subject)
			nofail(TOPIC ^Gambit($$topic))	# gambit in best matching topic
			if (%response != 0) # stop when we find something
			{
				^end(RULE)
			}
		}
	}
	if (%response == 0){ nofail(TOPIC ^gambit($$currenttopic)) } # gambit from current topic even though no keywords matched
	
	if (%response == 0) 
	{ 
		@8 = ^GambitTopics()		# all topics with gambits (excluding system topics)
		loop()
		{
			$$topic = pick(@8subject)
			nofail(TOPIC ^Gambit($$topic))	# try a topic at random
			if (%response != 0)
			{
				^end(RULE)
			}
		}
	}
	
	if (%response == 0) 
	{
		 ^repeat() 
	         [I am sorry I dont get you]
                 [can you be clear a little bit more please]
                 [could you please repeat]	  
	}



